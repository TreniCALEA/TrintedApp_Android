/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.trenicalea.trintedapp.apis

import com.trenicalea.trintedapp.models.*
import com.trenicalea.trintedapp.infrastructure.*

class RecensioneControllerApi(basePath: kotlin.String = "http://localhost:8080") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param body  
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun add1(body: RecensioneDto): kotlin.String {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/review-api/review"
        )
        val response = request<kotlin.String>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param reviewId  
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun delete1(reviewId: kotlin.Long): kotlin.String {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/review-api/review/{reviewId}".replace("{" + "reviewId" + "}", "$reviewId")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param reviewId  
     * @return kotlin.Array<Recensione>
     */
    @Suppress("UNCHECKED_CAST")
    fun findAll(reviewId: kotlin.Long): kotlin.Array<Recensione> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/review-api/review/{reviewId}".replace("{" + "reviewId" + "}", "$reviewId")
        )
        val response = request<kotlin.Array<Recensione>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Recensione>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param review  
     * @return PageRecensioneDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllPaged1(review: kotlin.Int): PageRecensioneDto {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/review-api/review/all/{review}".replace("{" + "review" + "}", "$review")
        )
        val response = request<PageRecensioneDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PageRecensioneDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
