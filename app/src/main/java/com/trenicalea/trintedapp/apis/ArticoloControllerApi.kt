/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.trenicalea.trintedapp.apis

import com.trenicalea.trintedapp.models.*
import com.trenicalea.trintedapp.infrastructure.*

class ArticoloControllerApi(basePath: kotlin.String = "http://localhost:8080") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param body  
     * @return ArticoloDto
     */
    @Suppress("UNCHECKED_CAST")
    fun add3(body: ArticoloDto): ArticoloDto {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/item-api/item"
        )
        val response = request<ArticoloDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ArticoloDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return kotlin.Array<ArticoloDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun all2(): kotlin.Array<ArticoloDto> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/item-api/item"
        )
        val response = request<kotlin.Array<ArticoloDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ArticoloDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param idItem  
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun delete3(idItem: kotlin.Long): kotlin.String {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/item-api/item/{idItem}".replace("{" + "idItem" + "}", "$idItem")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param idItem  
     * @return ArticoloDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getById2(idItem: kotlin.Long): ArticoloDto {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/item-api/item/{idItem}".replace("{" + "idItem" + "}", "$idItem")
        )
        val response = request<ArticoloDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ArticoloDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
